syntax = "proto3";

package proto;

// chat service definition
service ChatService {
	rpc Receive(Chat.Nil) returns (stream Chat.Message); // 接收本服消息
	rpc Send(Chat.Message) returns (Chat.Nil);  // 发送一个消息
	rpc Inbox(Chat.Id) returns (Chat.MessageList);  // 读取私人邮箱
	rpc GroupInbox(Chat.Id) returns (Chat.MessageList);  // 读取组邮箱
	rpc GlobalInbox(Chat.Id) returns (Chat.MessageList);  // 读取全局邮箱
	rpc CreateUser(Chat.Id) returns (Chat.Nil); // 创建一个用户
	rpc CreateGroup(Chat.Id) returns (Chat.Nil); // 创建一个组
	rpc JoinGroup(Chat.JoinGroup) returns (Chat.Nil); // 加入一个组
	rpc LeaveGroup(Chat.LeaveGroup) returns (Chat.Nil); // 离开一个组
}

message Chat {
	message Nil {
	}
	enum MessageType {
		P2P=0;
		GROUP=1;
		GLOBAL=2;
	}
	message Message {
		int32 From=1;			// eg:1
		int32 To=2; 			// eg:2 
		MessageType Type=3;		// message type
		uint64 ts=4; 			// timestamp get from snowflake
		string Body=5;			// eg:"hello, how are you?"	
	}
	message MessageList {
		repeated Message List=1;	// message list
	}
	message Id {
		int32 Id=1; 		// eg:1
	}
	message JoinGroup {
		int32 GroupId=1;	// group  to join into
		int32 UserId=2;		// user to join
	}
	message LeaveGroup {
		int32 GroupId=1;	// group to leave from
		int32 UserId=2;		// user to leave
	}
}
