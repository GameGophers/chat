// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	Chat
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Chat_MessageType int32

const (
	Chat_P2P    Chat_MessageType = 0
	Chat_GROUP  Chat_MessageType = 1
	Chat_GLOBAL Chat_MessageType = 2
)

var Chat_MessageType_name = map[int32]string{
	0: "P2P",
	1: "GROUP",
	2: "GLOBAL",
}
var Chat_MessageType_value = map[string]int32{
	"P2P":    0,
	"GROUP":  1,
	"GLOBAL": 2,
}

func (x Chat_MessageType) String() string {
	return proto1.EnumName(Chat_MessageType_name, int32(x))
}

type Chat struct {
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto1.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}

type Chat_Nil struct {
}

func (m *Chat_Nil) Reset()         { *m = Chat_Nil{} }
func (m *Chat_Nil) String() string { return proto1.CompactTextString(m) }
func (*Chat_Nil) ProtoMessage()    {}

type Chat_Message struct {
	From int32            `protobuf:"varint,1,opt" json:"From,omitempty"`
	To   int32            `protobuf:"varint,2,opt" json:"To,omitempty"`
	Type Chat_MessageType `protobuf:"varint,3,opt,enum=proto.Chat_MessageType" json:"Type,omitempty"`
	Body string           `protobuf:"bytes,4,opt" json:"Body,omitempty"`
}

func (m *Chat_Message) Reset()         { *m = Chat_Message{} }
func (m *Chat_Message) String() string { return proto1.CompactTextString(m) }
func (*Chat_Message) ProtoMessage()    {}

func init() {
	proto1.RegisterEnum("proto.Chat_MessageType", Chat_MessageType_name, Chat_MessageType_value)
}

// Client API for ChatService service

type ChatServiceClient interface {
	Receive(ctx context.Context, in *Chat_Nil, opts ...grpc.CallOption) (ChatService_ReceiveClient, error)
	Send(ctx context.Context, in *Chat_Message, opts ...grpc.CallOption) (*Chat_Nil, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Receive(ctx context.Context, in *Chat_Nil, opts ...grpc.CallOption) (ChatService_ReceiveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatService_serviceDesc.Streams[0], c.cc, "/proto.ChatService/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_ReceiveClient interface {
	Recv() (*Chat_Message, error)
	grpc.ClientStream
}

type chatServiceReceiveClient struct {
	grpc.ClientStream
}

func (x *chatServiceReceiveClient) Recv() (*Chat_Message, error) {
	m := new(Chat_Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) Send(ctx context.Context, in *Chat_Message, opts ...grpc.CallOption) (*Chat_Nil, error) {
	out := new(Chat_Nil)
	err := grpc.Invoke(ctx, "/proto.ChatService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	Receive(*Chat_Nil, ChatService_ReceiveServer) error
	Send(context.Context, *Chat_Message) (*Chat_Nil, error)
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Chat_Nil)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).Receive(m, &chatServiceReceiveServer{stream})
}

type ChatService_ReceiveServer interface {
	Send(*Chat_Message) error
	grpc.ServerStream
}

type chatServiceReceiveServer struct {
	grpc.ServerStream
}

func (x *chatServiceReceiveServer) Send(m *Chat_Message) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_Send_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Chat_Message)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChatServiceServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ChatService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Receive",
			Handler:       _ChatService_Receive_Handler,
			ServerStreams: true,
		},
	},
}
