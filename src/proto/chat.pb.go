// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	Chat
*/
package proto

import proto1 "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal

type Chat struct {
}

func (m *Chat) Reset()         { *m = Chat{} }
func (m *Chat) String() string { return proto1.CompactTextString(m) }
func (*Chat) ProtoMessage()    {}

type Chat_NullResult struct {
}

func (m *Chat_NullResult) Reset()         { *m = Chat_NullResult{} }
func (m *Chat_NullResult) String() string { return proto1.CompactTextString(m) }
func (*Chat_NullResult) ProtoMessage()    {}

// chat room channel;
type Chat_Channel struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Chat_Channel) Reset()         { *m = Chat_Channel{} }
func (m *Chat_Channel) String() string { return proto1.CompactTextString(m) }
func (*Chat_Channel) ProtoMessage()    {}

type Chat_Msg struct {
	// who send, if is 0, it's the sys_user.
	FromUser int32 `protobuf:"varint,1,opt,name=from_user" json:"from_user,omitempty"`
	ToUser   int32 `protobuf:"varint,2,opt,name=to_user" json:"to_user,omitempty"`
	// the user name who send the message.
	UserName string `protobuf:"bytes,3,opt,name=user_name" json:"user_name,omitempty"`
	Channel  string `protobuf:"bytes,4,opt,name=channel" json:"channel,omitempty"`
	// message body
	Msg string `protobuf:"bytes,5,opt,name=msg" json:"msg,omitempty"`
	// create message time.
	CreateTime int64 `protobuf:"varint,6,opt,name=create_time" json:"create_time,omitempty"`
}

func (m *Chat_Msg) Reset()         { *m = Chat_Msg{} }
func (m *Chat_Msg) String() string { return proto1.CompactTextString(m) }
func (*Chat_Msg) ProtoMessage()    {}

type Chat_MsgList struct {
	List []*Chat_Msg `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *Chat_MsgList) Reset()         { *m = Chat_MsgList{} }
func (m *Chat_MsgList) String() string { return proto1.CompactTextString(m) }
func (*Chat_MsgList) ProtoMessage()    {}

func (m *Chat_MsgList) GetList() []*Chat_Msg {
	if m != nil {
		return m.List
	}
	return nil
}

func init() {
}

// Client API for ChatService service

type ChatServiceClient interface {
	Query(ctx context.Context, in *Chat_Channel, opts ...grpc.CallOption) (ChatService_QueryClient, error)
	Send(ctx context.Context, in *Chat_Msg, opts ...grpc.CallOption) (*Chat_NullResult, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Query(ctx context.Context, in *Chat_Channel, opts ...grpc.CallOption) (ChatService_QueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ChatService_serviceDesc.Streams[0], c.cc, "/proto.ChatService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_QueryClient interface {
	Recv() (*Chat_MsgList, error)
	grpc.ClientStream
}

type chatServiceQueryClient struct {
	grpc.ClientStream
}

func (x *chatServiceQueryClient) Recv() (*Chat_MsgList, error) {
	m := new(Chat_MsgList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) Send(ctx context.Context, in *Chat_Msg, opts ...grpc.CallOption) (*Chat_NullResult, error) {
	out := new(Chat_NullResult)
	err := grpc.Invoke(ctx, "/proto.ChatService/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	Query(*Chat_Channel, ChatService_QueryServer) error
	Send(context.Context, *Chat_Msg) (*Chat_NullResult, error)
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Chat_Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).Query(m, &chatServiceQueryServer{stream})
}

type ChatService_QueryServer interface {
	Send(*Chat_MsgList) error
	grpc.ServerStream
}

type chatServiceQueryServer struct {
	grpc.ServerStream
}

func (x *chatServiceQueryServer) Send(m *Chat_MsgList) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_Send_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Chat_Msg)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ChatServiceServer).Send(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ChatService_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _ChatService_Query_Handler,
			ServerStreams: true,
		},
	},
}
